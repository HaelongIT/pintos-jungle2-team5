Kernel command line: -q -f put syn-write put child-syn-wrt run syn-write
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  105,062,400 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 226 sector (113 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
child-syn-wrt: exit(0)
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
child-syn-wrt: exit(1)
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
child-syn-wrt: exit(2)
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
child-syn-wrt: exit(3)
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
child-syn-wrt: exit(4)
(syn-write) exec child 5 of 10: "child-syn-wrt 4"
child-syn-wrt: exit(5)
(syn-write) exec child 6 of 10: "child-syn-wrt 5"
child-syn-wrt: exit(6)
(syn-write) exec child 7 of 10: "child-syn-wrt 6"
child-syn-wrt: exit(7)
(syn-write) exec child 8 of 10: "child-syn-wrt 7"
child-syn-wrt: exit(8)
(syn-write) exec child 9 of 10: "child-syn-wrt 8"
child-syn-wrt: exit(9)
(syn-write) exec child 10 of 10: "child-syn-wrt 9"
Interrupt 0x0d (#GP General Protection Exception) at rip=800421c64c
 cr2=0000000000000000 error=               0
rax cccccccccccccba4 rbx 0000000000000000 rcx 0000000000403816 rdx 0000000000000020
rsp 0000008004240e90 rbp 0000008004240ec0 rsi 0000000000000000 rdi 0000008004240108
rip 000000800421c64c r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421d636 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000282
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x800421873e 0x800421d3ed 0x80042095b6 0x80042099d4 0x800421c5b4 0x800421da2e 0x800421d6fe 0x800421d55f 0x4007b7 0x400196 0x400fa5 0x400fee.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 117 ticks
Thread: 30 idle ticks, 51 kernel ticks, 36 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 693 reads, 522 writes
hd1:0: 226 reads, 0 writes
Console: 2527 characters output
Key